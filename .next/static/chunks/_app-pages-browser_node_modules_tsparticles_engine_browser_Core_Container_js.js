"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_tsparticles_engine_browser_Core_Container_js"],{

/***/ "(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Canvas.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tsparticles/engine/browser/Core/Canvas.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: function() { return /* binding */ Canvas; }\n/* harmony export */ });\n/* harmony import */ var _Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/CanvasUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/CanvasUtils.js\");\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/Utils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/Utils.js\");\n/* harmony import */ var _Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Utils/ColorUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/ColorUtils.js\");\n/* harmony import */ var _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils/Constants.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/Constants.js\");\n\n\n\n\nfunction setTransformValue(factor, newFactor, key) {\n    const newValue = newFactor[key], defaultValue = 1;\n    if (newValue !== undefined) {\n        var _factor_key;\n        factor[key] = ((_factor_key = factor[key]) !== null && _factor_key !== void 0 ? _factor_key : defaultValue) * newValue;\n    }\n}\nfunction setStyle(canvas, style) {\n    let important = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    if (!style) {\n        return;\n    }\n    const element = canvas;\n    if (!element) {\n        return;\n    }\n    const elementStyle = element.style;\n    if (!elementStyle) {\n        return;\n    }\n    for(const key in style){\n        const value = style[key];\n        if (!value) {\n            continue;\n        }\n        elementStyle.setProperty(key, value, important ? \"important\" : \"\");\n    }\n}\nclass Canvas {\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill, minimumLength = 0;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        } else if (trail.enable && trail.length > minimumLength && trailFill) {\n            if (trailFill.color) {\n                this._paintBase((0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.getStyleFromRgb)(trailFill.color, trailFill.opacity));\n            } else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        } else if (options.clear) {\n            this.draw((ctx)=>{\n                (0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_0__.clear)(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        this.stop();\n        if (this._generated) {\n            const element = this.element;\n            element === null || element === void 0 ? void 0 : element.remove();\n        } else {\n            this._resetOriginalStyle();\n        }\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return;\n        }\n        return cb(ctx);\n    }\n    drawAsync(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return undefined;\n        }\n        return cb(ctx);\n    }\n    drawParticle(particle, delta) {\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius(), minimumSize = 0;\n        if (radius <= minimumSize) {\n            return;\n        }\n        var _particle_getStrokeColor;\n        const pfColor = particle.getFillColor(), psColor = (_particle_getStrokeColor = particle.getStrokeColor()) !== null && _particle_getStrokeColor !== void 0 ? _particle_getStrokeColor : pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx)=>{\n            var _particle_opacity;\n            var _particle_bubble_opacity, _ref, _particle_strokeOpacity;\n            const container = this.container, options = container.actualOptions, zIndexOptions = particle.options.zIndex, zIndexFactorOffset = 1, zIndexFactor = zIndexFactorOffset - particle.zIndexFactor, zOpacityFactor = zIndexFactor ** zIndexOptions.opacityRate, defaultOpacity = 1, opacity = (_ref = (_particle_bubble_opacity = particle.bubble.opacity) !== null && _particle_bubble_opacity !== void 0 ? _particle_bubble_opacity : (_particle_opacity = particle.opacity) === null || _particle_opacity === void 0 ? void 0 : _particle_opacity.value) !== null && _ref !== void 0 ? _ref : defaultOpacity, strokeOpacity = (_particle_strokeOpacity = particle.strokeOpacity) !== null && _particle_strokeOpacity !== void 0 ? _particle_strokeOpacity : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.getStyleFromHsl)(fColor, zOpacity) : undefined\n            };\n            colorStyles.stroke = sColor ? (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.getStyleFromHsl)(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            (0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_0__.drawParticle)({\n                container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * zIndexFactor ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx)=>(0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_0__.drawParticlePlugin)(ctx, plugin, particle, delta));\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx)=>(0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_0__.drawPlugin)(ctx, plugin, delta));\n    }\n    async init() {\n        this._safeMutationObserver((obs)=>obs.disconnect());\n        this._mutationObserver = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__.safeMutationObserver)((records)=>{\n            for (const record of records){\n                if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                    this._repairStyle();\n                }\n            }\n        });\n        this.resize();\n        this._initStyle();\n        await this._initCover();\n        try {\n            await this._initTrail();\n        } catch (e) {\n            (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__.getLogger)().error(e);\n        }\n        this.initBackground();\n        this._safeMutationObserver((obs)=>{\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, {\n                attributes: true\n            });\n        });\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.rangeColorToRgb)(background.color);\n            elementStyle.backgroundColor = color ? (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.getStyleFromRgb)(color, background.opacity) : \"\";\n        } else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins){\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            var _plugin_particleFillColor;\n            if ((_plugin_particleFillColor = plugin.particleFillColor) !== null && _plugin_particleFillColor !== void 0 ? _plugin_particleFillColor : plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters){\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            var _updater_getColorStyles, _ref;\n            if ((_ref = (_updater_getColorStyles = updater.getColorStyles) !== null && _updater_getColorStyles !== void 0 ? _updater_getColorStyles : updater.getTransformValues) !== null && _ref !== void 0 ? _ref : updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        if (this._generated && this.element) {\n            this.element.remove();\n        }\n        this._generated = canvas.dataset && _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__.generatedAttribute in canvas.dataset ? canvas.dataset[_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__.generatedAttribute] === \"true\" : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__.deepExtend)({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        this._safeMutationObserver((obs)=>{\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, {\n                attributes: true\n            });\n        });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx)=>{\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                (0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_0__.clear)(ctx, this.size);\n                if (this._coverImage) {\n                    this._paintImage(this._coverImage.image, this._coverImage.opacity);\n                } else if (this._coverColorStyle) {\n                    this._paintBase(this._coverColorStyle);\n                } else {\n                    this._paintBase();\n                }\n            } else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return false;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio\n        };\n        if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n            return false;\n        }\n        const oldSize = {\n            ...size\n        };\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            container.particles.setResizeFactor({\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height\n            });\n        }\n        return true;\n    }\n    stop() {\n        this._safeMutationObserver((obs)=>obs.disconnect());\n        this._mutationObserver = undefined;\n        this.draw((ctx)=>(0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_0__.clear)(ctx, this.size));\n    }\n    async windowResize() {\n        if (!this.element || !this.resize()) {\n            return;\n        }\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    constructor(container){\n        this.container = container;\n        this._applyPostDrawUpdaters = (particle)=>{\n            for (const updater of this._postDrawUpdaters){\n                var _updater_afterDraw;\n                (_updater_afterDraw = updater.afterDraw) === null || _updater_afterDraw === void 0 ? void 0 : _updater_afterDraw.call(updater, particle);\n            }\n        };\n        this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform)=>{\n            for (const updater of this._preDrawUpdaters){\n                var _updater_beforeDraw;\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n                if (updater.getTransformValues) {\n                    const updaterTransform = updater.getTransformValues(particle);\n                    for(const key in updaterTransform){\n                        setTransformValue(transform, updaterTransform, key);\n                    }\n                }\n                (_updater_beforeDraw = updater.beforeDraw) === null || _updater_beforeDraw === void 0 ? void 0 : _updater_beforeDraw.call(updater, particle);\n            }\n        };\n        this._applyResizePlugins = ()=>{\n            for (const plugin of this._resizePlugins){\n                var _plugin_resize;\n                (_plugin_resize = plugin.resize) === null || _plugin_resize === void 0 ? void 0 : _plugin_resize.call(plugin);\n            }\n        };\n        this._getPluginParticleColors = (particle)=>{\n            let fColor, sColor;\n            for (const plugin of this._colorPlugins){\n                if (!fColor && plugin.particleFillColor) {\n                    fColor = (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.rangeColorToHsl)(plugin.particleFillColor(particle));\n                }\n                if (!sColor && plugin.particleStrokeColor) {\n                    sColor = (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.rangeColorToHsl)(plugin.particleStrokeColor(particle));\n                }\n                if (fColor && sColor) {\n                    break;\n                }\n            }\n            return [\n                fColor,\n                sColor\n            ];\n        };\n        this._initCover = async ()=>{\n            const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color;\n            if (color) {\n                const coverRgb = (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.rangeColorToRgb)(color);\n                if (coverRgb) {\n                    const coverColor = {\n                        ...coverRgb,\n                        a: cover.opacity\n                    };\n                    this._coverColorStyle = (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.getStyleFromRgb)(coverColor, coverColor.a);\n                }\n            } else {\n                await new Promise((resolve, reject)=>{\n                    if (!cover.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", ()=>{\n                        this._coverImage = {\n                            image: img,\n                            opacity: cover.opacity\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", (evt)=>{\n                        reject(evt.error);\n                    });\n                    img.src = cover.image;\n                });\n            }\n        };\n        this._initStyle = ()=>{\n            const element = this.element, options = this.container.actualOptions;\n            if (!element) {\n                return;\n            }\n            if (this._fullScreen) {\n                this._originalStyle = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__.deepExtend)({}, element.style);\n                this._setFullScreenStyle();\n            } else {\n                this._resetOriginalStyle();\n            }\n            for(const key in options.style){\n                if (!key || !options.style) {\n                    continue;\n                }\n                const value = options.style[key];\n                if (!value) {\n                    continue;\n                }\n                element.style.setProperty(key, value, \"important\");\n            }\n        };\n        this._initTrail = async ()=>{\n            const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n            if (!trail.enable) {\n                return;\n            }\n            const factorNumerator = 1, opacity = factorNumerator / trail.length;\n            if (trailFill.color) {\n                const fillColor = (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__.rangeColorToRgb)(trailFill.color);\n                if (!fillColor) {\n                    return;\n                }\n                this._trailFill = {\n                    color: {\n                        ...fillColor\n                    },\n                    opacity\n                };\n            } else {\n                await new Promise((resolve, reject)=>{\n                    if (!trailFill.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", ()=>{\n                        this._trailFill = {\n                            image: img,\n                            opacity\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", (evt)=>{\n                        reject(evt.error);\n                    });\n                    img.src = trailFill.image;\n                });\n            }\n        };\n        this._paintBase = (baseColor)=>{\n            this.draw((ctx)=>(0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_0__.paintBase)(ctx, this.size, baseColor));\n        };\n        this._paintImage = (image, opacity)=>{\n            this.draw((ctx)=>(0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_0__.paintImage)(ctx, this.size, image, opacity));\n        };\n        this._repairStyle = ()=>{\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            this._safeMutationObserver((observer)=>observer.disconnect());\n            this._initStyle();\n            this.initBackground();\n            this._safeMutationObserver((observer)=>observer.observe(element, {\n                    attributes: true\n                }));\n        };\n        this._resetOriginalStyle = ()=>{\n            const element = this.element, originalStyle = this._originalStyle;\n            if (!(element && originalStyle)) {\n                return;\n            }\n            setStyle(element, originalStyle);\n        };\n        this._safeMutationObserver = (callback)=>{\n            if (!this._mutationObserver) {\n                return;\n            }\n            callback(this._mutationObserver);\n        };\n        this._setFullScreenStyle = ()=>{\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            const radix = 10;\n            setStyle(element, {\n                position: \"fixed\",\n                zIndex: this.container.actualOptions.fullScreen.zIndex.toString(radix),\n                top: \"0\",\n                left: \"0\",\n                width: \"100%\",\n                height: \"100%\"\n            }, true);\n        };\n        this.size = {\n            height: 0,\n            width: 0\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Canvas.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Container.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tsparticles/engine/browser/Core/Container.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Container: function() { return /* binding */ Container; }\n/* harmony export */ });\n/* harmony import */ var _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils/Constants.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/Constants.js\");\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/Utils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/Utils.js\");\n/* harmony import */ var _Canvas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Canvas.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Canvas.js\");\n/* harmony import */ var _Utils_EventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils/EventListeners.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/EventListeners.js\");\n/* harmony import */ var _Options_Classes_Options_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Options/Classes/Options.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Options/Classes/Options.js\");\n/* harmony import */ var _Particles_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Particles.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Particles.js\");\n/* harmony import */ var _Retina_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Retina.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Retina.js\");\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Utils/NumberUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js\");\n/* harmony import */ var _Utils_OptionsUtils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Utils/OptionsUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/OptionsUtils.js\");\n\n\n\n\n\n\n\n\n\nfunction guardCheck(container) {\n    return container && !container.destroyed;\n}\nconst defaultFps = 60;\nfunction initDelta(value) {\n    let fpsLimit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultFps, smooth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    return {\n        value,\n        factor: smooth ? defaultFps / fpsLimit : defaultFps * value / _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds\n    };\n}\nfunction loadContainerOptions(engine, container) {\n    for(var _len = arguments.length, sourceOptionsArr = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        sourceOptionsArr[_key - 2] = arguments[_key];\n    }\n    const options = new _Options_Classes_Options_js__WEBPACK_IMPORTED_MODULE_4__.Options(engine, container);\n    (0,_Utils_OptionsUtils_js__WEBPACK_IMPORTED_MODULE_8__.loadOptions)(options, ...sourceOptionsArr);\n    return options;\n}\nclass Container {\n    get animationStatus() {\n        return !this._paused && !this.pageHidden && guardCheck(this);\n    }\n    get options() {\n        return this._options;\n    }\n    get sourceOptions() {\n        return this._sourceOptions;\n    }\n    addClickHandler(callback) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const el = this.interactivity.element;\n        if (!el) {\n            return;\n        }\n        const clickOrTouchHandler = (e, pos, radius)=>{\n            if (!guardCheck(this)) {\n                return;\n            }\n            const pxRatio = this.retina.pixelRatio, posRetina = {\n                x: pos.x * pxRatio,\n                y: pos.y * pxRatio\n            }, particles = this.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\n            callback(e, particles);\n        };\n        const clickHandler = (e)=>{\n            if (!guardCheck(this)) {\n                return;\n            }\n            const mouseEvent = e, pos = {\n                x: mouseEvent.offsetX || mouseEvent.clientX,\n                y: mouseEvent.offsetY || mouseEvent.clientY\n            }, radius = 1;\n            clickOrTouchHandler(e, pos, radius);\n        };\n        const touchStartHandler = ()=>{\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = true;\n            touchMoved = false;\n        };\n        const touchMoveHandler = ()=>{\n            if (!guardCheck(this)) {\n                return;\n            }\n            touchMoved = true;\n        };\n        const touchEndHandler = (e)=>{\n            if (!guardCheck(this)) {\n                return;\n            }\n            if (touched && !touchMoved) {\n                const touchEvent = e;\n                const lengthOffset = 1;\n                let lastTouch = touchEvent.touches[touchEvent.touches.length - lengthOffset];\n                if (!lastTouch) {\n                    lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - lengthOffset];\n                    if (!lastTouch) {\n                        return;\n                    }\n                }\n                const element = this.canvas.element, canvasRect = element ? element.getBoundingClientRect() : undefined, minCoordinate = 0, pos = {\n                    x: lastTouch.clientX - (canvasRect ? canvasRect.left : minCoordinate),\n                    y: lastTouch.clientY - (canvasRect ? canvasRect.top : minCoordinate)\n                };\n                clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        const touchCancelHandler = ()=>{\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        let touched = false, touchMoved = false;\n        el.addEventListener(\"click\", clickHandler);\n        el.addEventListener(\"touchstart\", touchStartHandler);\n        el.addEventListener(\"touchmove\", touchMoveHandler);\n        el.addEventListener(\"touchend\", touchEndHandler);\n        el.addEventListener(\"touchcancel\", touchCancelHandler);\n    }\n    addLifeTime(value) {\n        this._lifeTime += value;\n    }\n    addPath(key, generator) {\n        let override = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        if (!guardCheck(this) || !override && this.pathGenerators.has(key)) {\n            return false;\n        }\n        this.pathGenerators.set(key, generator);\n        return true;\n    }\n    alive() {\n        return !this._duration || this._lifeTime <= this._duration;\n    }\n    destroy() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        this.particles.destroy();\n        this.canvas.destroy();\n        for (const [, effectDrawer] of this.effectDrawers){\n            var _effectDrawer_destroy;\n            (_effectDrawer_destroy = effectDrawer.destroy) === null || _effectDrawer_destroy === void 0 ? void 0 : _effectDrawer_destroy.call(effectDrawer, this);\n        }\n        for (const [, shapeDrawer] of this.shapeDrawers){\n            var _shapeDrawer_destroy;\n            (_shapeDrawer_destroy = shapeDrawer.destroy) === null || _shapeDrawer_destroy === void 0 ? void 0 : _shapeDrawer_destroy.call(shapeDrawer, this);\n        }\n        for (const key of this.effectDrawers.keys()){\n            this.effectDrawers.delete(key);\n        }\n        for (const key of this.shapeDrawers.keys()){\n            this.shapeDrawers.delete(key);\n        }\n        this._engine.clearPlugins(this);\n        this.destroyed = true;\n        const mainArr = this._engine.dom(), idx = mainArr.findIndex((t)=>t === this), minIndex = 0;\n        if (idx >= minIndex) {\n            const deleteCount = 1;\n            mainArr.splice(idx, deleteCount);\n        }\n        this._engine.dispatchEvent(\"containerDestroyed\", {\n            container: this\n        });\n    }\n    draw(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        let refreshTime = force;\n        const frame = (timestamp)=>{\n            if (refreshTime) {\n                this._lastFrameTime = undefined;\n                refreshTime = false;\n            }\n            this._nextFrame(timestamp);\n        };\n        this._drawAnimationFrame = requestAnimationFrame((timestamp)=>frame(timestamp));\n    }\n    async export(type) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        for (const [, plugin] of this.plugins){\n            if (!plugin.export) {\n                continue;\n            }\n            const res = await plugin.export(type, options);\n            if (!res.supported) {\n                continue;\n            }\n            return res.blob;\n        }\n        (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__.getLogger)().error(\"\".concat(_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.errorPrefix, \" - Export plugin with type \").concat(type, \" not found\"));\n    }\n    handleClickMode(mode) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.particles.handleClickMode(mode);\n        for (const [, plugin] of this.plugins){\n            var _plugin_handleClickMode;\n            (_plugin_handleClickMode = plugin.handleClickMode) === null || _plugin_handleClickMode === void 0 ? void 0 : _plugin_handleClickMode.call(plugin, mode);\n        }\n    }\n    async init() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const effects = this._engine.getSupportedEffects();\n        for (const type of effects){\n            const drawer = this._engine.getEffectDrawer(type);\n            if (drawer) {\n                this.effectDrawers.set(type, drawer);\n            }\n        }\n        const shapes = this._engine.getSupportedShapes();\n        for (const type of shapes){\n            const drawer = this._engine.getShapeDrawer(type);\n            if (drawer) {\n                this.shapeDrawers.set(type, drawer);\n            }\n        }\n        await this.particles.initPlugins();\n        this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        const availablePlugins = await this._engine.getAvailablePlugins(this);\n        for (const [id, plugin] of availablePlugins){\n            this.plugins.set(id, plugin);\n        }\n        this.retina.init();\n        await this.canvas.init();\n        this.updateActualOptions();\n        this.canvas.initBackground();\n        this.canvas.resize();\n        this.zLayers = this.actualOptions.zLayers;\n        this._duration = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_7__.getRangeValue)(this.actualOptions.duration) * _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds;\n        this._delay = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_7__.getRangeValue)(this.actualOptions.delay) * _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds;\n        this._lifeTime = 0;\n        const defaultFpsLimit = 120, minFpsLimit = 0;\n        this.fpsLimit = this.actualOptions.fpsLimit > minFpsLimit ? this.actualOptions.fpsLimit : defaultFpsLimit;\n        this._smooth = this.actualOptions.smooth;\n        for (const [, drawer] of this.effectDrawers){\n            var _drawer_init;\n            await ((_drawer_init = drawer.init) === null || _drawer_init === void 0 ? void 0 : _drawer_init.call(drawer, this));\n        }\n        for (const [, drawer] of this.shapeDrawers){\n            var _drawer_init1;\n            await ((_drawer_init1 = drawer.init) === null || _drawer_init1 === void 0 ? void 0 : _drawer_init1.call(drawer, this));\n        }\n        for (const [, plugin] of this.plugins){\n            var _plugin_init;\n            await ((_plugin_init = plugin.init) === null || _plugin_init === void 0 ? void 0 : _plugin_init.call(plugin));\n        }\n        this._engine.dispatchEvent(\"containerInit\", {\n            container: this\n        });\n        await this.particles.init();\n        this.particles.setDensity();\n        for (const [, plugin] of this.plugins){\n            var _plugin_particlesSetup;\n            (_plugin_particlesSetup = plugin.particlesSetup) === null || _plugin_particlesSetup === void 0 ? void 0 : _plugin_particlesSetup.call(plugin);\n        }\n        this._engine.dispatchEvent(\"particlesSetup\", {\n            container: this\n        });\n    }\n    async loadTheme(name) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._currentTheme = name;\n        await this.refresh();\n    }\n    pause() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        if (this._drawAnimationFrame !== undefined) {\n            cancelAnimationFrame(this._drawAnimationFrame);\n            delete this._drawAnimationFrame;\n        }\n        if (this._paused) {\n            return;\n        }\n        for (const [, plugin] of this.plugins){\n            var _plugin_pause;\n            (_plugin_pause = plugin.pause) === null || _plugin_pause === void 0 ? void 0 : _plugin_pause.call(plugin);\n        }\n        if (!this.pageHidden) {\n            this._paused = true;\n        }\n        this._engine.dispatchEvent(\"containerPaused\", {\n            container: this\n        });\n    }\n    play(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const needsUpdate = this._paused || force;\n        if (this._firstStart && !this.actualOptions.autoPlay) {\n            this._firstStart = false;\n            return;\n        }\n        if (this._paused) {\n            this._paused = false;\n        }\n        if (needsUpdate) {\n            for (const [, plugin] of this.plugins){\n                if (plugin.play) {\n                    plugin.play();\n                }\n            }\n        }\n        this._engine.dispatchEvent(\"containerPlay\", {\n            container: this\n        });\n        this.draw(needsUpdate !== null && needsUpdate !== void 0 ? needsUpdate : false);\n    }\n    async refresh() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        return this.start();\n    }\n    async reset() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._initialSourceOptions = undefined;\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        return this.refresh();\n    }\n    async start() {\n        if (!guardCheck(this) || this.started) {\n            return;\n        }\n        await this.init();\n        this.started = true;\n        await new Promise((resolve)=>{\n            const start = async ()=>{\n                this._eventListeners.addListeners();\n                if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n                    this._intersectionObserver.observe(this.interactivity.element);\n                }\n                for (const [, plugin] of this.plugins){\n                    var _plugin_start;\n                    await ((_plugin_start = plugin.start) === null || _plugin_start === void 0 ? void 0 : _plugin_start.call(plugin));\n                }\n                this._engine.dispatchEvent(\"containerStarted\", {\n                    container: this\n                });\n                this.play();\n                resolve();\n            };\n            this._delayTimeout = setTimeout(()=>void start(), this._delay);\n        });\n    }\n    stop() {\n        if (!guardCheck(this) || !this.started) {\n            return;\n        }\n        if (this._delayTimeout) {\n            clearTimeout(this._delayTimeout);\n            delete this._delayTimeout;\n        }\n        this._firstStart = true;\n        this.started = false;\n        this._eventListeners.removeListeners();\n        this.pause();\n        this.particles.clear();\n        this.canvas.stop();\n        if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n            this._intersectionObserver.unobserve(this.interactivity.element);\n        }\n        for (const [, plugin] of this.plugins){\n            var _plugin_stop;\n            (_plugin_stop = plugin.stop) === null || _plugin_stop === void 0 ? void 0 : _plugin_stop.call(plugin);\n        }\n        for (const key of this.plugins.keys()){\n            this.plugins.delete(key);\n        }\n        this._sourceOptions = this._options;\n        this._engine.dispatchEvent(\"containerStopped\", {\n            container: this\n        });\n    }\n    updateActualOptions() {\n        this.actualOptions.responsive = [];\n        const newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\n        this.actualOptions.setTheme(this._currentTheme);\n        if (this._responsiveMaxWidth === newMaxWidth) {\n            return false;\n        }\n        this._responsiveMaxWidth = newMaxWidth;\n        return true;\n    }\n    constructor(engine, id, sourceOptions){\n        this._intersectionManager = (entries)=>{\n            if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\n                return;\n            }\n            for (const entry of entries){\n                if (entry.target !== this.interactivity.element) {\n                    continue;\n                }\n                if (entry.isIntersecting) {\n                    void this.play();\n                } else {\n                    this.pause();\n                }\n            }\n        };\n        this._nextFrame = (timestamp)=>{\n            try {\n                if (!this._smooth && this._lastFrameTime !== undefined && timestamp < this._lastFrameTime + _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds / this.fpsLimit) {\n                    this.draw(false);\n                    return;\n                }\n                var _this__lastFrameTime;\n                (_this__lastFrameTime = this._lastFrameTime) !== null && _this__lastFrameTime !== void 0 ? _this__lastFrameTime : this._lastFrameTime = timestamp;\n                const delta = initDelta(timestamp - this._lastFrameTime, this.fpsLimit, this._smooth);\n                this.addLifeTime(delta.value);\n                this._lastFrameTime = timestamp;\n                if (delta.value > _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds) {\n                    this.draw(false);\n                    return;\n                }\n                this.particles.draw(delta);\n                if (!this.alive()) {\n                    this.destroy();\n                    return;\n                }\n                if (this.animationStatus) {\n                    this.draw(false);\n                }\n            } catch (e) {\n                (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__.getLogger)().error(\"\".concat(_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.errorPrefix, \" in animation loop\"), e);\n            }\n        };\n        this._engine = engine;\n        this.id = Symbol(id);\n        this.fpsLimit = 120;\n        this._smooth = false;\n        this._delay = 0;\n        this._duration = 0;\n        this._lifeTime = 0;\n        this._firstStart = true;\n        this.started = false;\n        this.destroyed = false;\n        this._paused = true;\n        this._lastFrameTime = 0;\n        this.zLayers = 100;\n        this.pageHidden = false;\n        this._sourceOptions = sourceOptions;\n        this._initialSourceOptions = sourceOptions;\n        this.retina = new _Retina_js__WEBPACK_IMPORTED_MODULE_6__.Retina(this);\n        this.canvas = new _Canvas_js__WEBPACK_IMPORTED_MODULE_2__.Canvas(this);\n        this.particles = new _Particles_js__WEBPACK_IMPORTED_MODULE_5__.Particles(this._engine, this);\n        this.pathGenerators = new Map();\n        this.interactivity = {\n            mouse: {\n                clicking: false,\n                inside: false\n            }\n        };\n        this.plugins = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this);\n        this._eventListeners = new _Utils_EventListeners_js__WEBPACK_IMPORTED_MODULE_3__.EventListeners(this);\n        this._intersectionObserver = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__.safeIntersectionObserver)((entries)=>this._intersectionManager(entries));\n        this._engine.dispatchEvent(\"containerBuilt\", {\n            container: this\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Container.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Particle.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tsparticles/engine/browser/Core/Particle.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Particle: function() { return /* binding */ Particle; }\n/* harmony export */ });\n/* harmony import */ var _Utils_Vectors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils/Vectors.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/Vectors.js\");\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/NumberUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js\");\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Utils/Utils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/Utils.js\");\n/* harmony import */ var _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils/Constants.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/Constants.js\");\n/* harmony import */ var _Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Utils/ColorUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/ColorUtils.js\");\n/* harmony import */ var _Options_Classes_Interactivity_Interactivity_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Options/Classes/Interactivity/Interactivity.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Interactivity.js\");\n/* harmony import */ var _Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Utils/CanvasUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/CanvasUtils.js\");\n/* harmony import */ var _Utils_OptionsUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Utils/OptionsUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/OptionsUtils.js\");\n\n\n\n\n\n\n\n\nconst defaultRetryCount = 0, double = 2, half = 0.5, squareExp = 2;\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.deepExtend)({\n        close: effectOptions.close,\n        fill: effectOptions.fill\n    }, (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.itemFromSingleOrMultiple)(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.deepExtend)({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill\n    }, (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.itemFromSingleOrMultiple)(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!(0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.isInArray)(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    } else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nclass Particle {\n    destroy(override) {\n        var _shapeDrawer_particleDestroy;\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer === null || shapeDrawer === void 0 ? void 0 : (_shapeDrawer_particleDestroy = shapeDrawer.particleDestroy) === null || _shapeDrawer_particleDestroy === void 0 ? void 0 : _shapeDrawer_particleDestroy.call(shapeDrawer, this);\n        for (const [, plugin] of container.plugins){\n            var _plugin_particleDestroyed;\n            (_plugin_particleDestroyed = plugin.particleDestroyed) === null || _plugin_particleDestroyed === void 0 ? void 0 : _plugin_particleDestroyed.call(plugin, this, override);\n        }\n        for (const updater of container.particles.updaters){\n            var _updater_particleDestroyed;\n            (_updater_particleDestroyed = updater.particleDestroyed) === null || _updater_particleDestroyed === void 0 ? void 0 : _updater_particleDestroyed.call(updater, this, override);\n        }\n        pathGenerator === null || pathGenerator === void 0 ? void 0 : pathGenerator.reset(this);\n        this._engine.dispatchEvent(\"particleDestroyed\", {\n            container: this.container,\n            data: {\n                particle: this\n            }\n        });\n    }\n    draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const [, plugin] of container.plugins){\n            canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        var _this_bubble_color;\n        return this._getRollColor((_this_bubble_color = this.bubble.color) !== null && _this_bubble_color !== void 0 ? _this_bubble_color : (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_4__.getHslFromAnimation)(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z\n        };\n    }\n    getRadius() {\n        var _this_bubble_radius;\n        return (_this_bubble_radius = this.bubble.radius) !== null && _this_bubble_radius !== void 0 ? _this_bubble_radius : this.size.value;\n    }\n    getStrokeColor() {\n        var _this_bubble_color;\n        return this._getRollColor((_this_bubble_color = this.bubble.color) !== null && _this_bubble_color !== void 0 ? _this_bubble_color : (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_4__.getHslFromAnimation)(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        var _effectDrawer_particleInit, _shapeDrawer_particleInit;\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {}\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = (0,_Utils_OptionsUtils_js__WEBPACK_IMPORTED_MODULE_7__.loadParticlesOptions)(this._engine, container, mainOptions.particles), effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.effect = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.itemFromSingleOrMultiple)(effectType, this.id, reduceDuplicates);\n        this.shape = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.itemFromSingleOrMultiple)(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            var _overrideOptions_effect, _overrideOptions_shape;\n            if ((_overrideOptions_effect = overrideOptions.effect) === null || _overrideOptions_effect === void 0 ? void 0 : _overrideOptions_effect.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.itemFromSingleOrMultiple)(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if ((_overrideOptions_shape = overrideOptions.shape) === null || _overrideOptions_shape === void 0 ? void 0 : _overrideOptions_shape.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.itemFromSingleOrMultiple)(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new _Options_Classes_Interactivity_Interactivity_js__WEBPACK_IMPORTED_MODULE_5__.Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        var _effectData_fill;\n        this.effectFill = (_effectData_fill = effectData === null || effectData === void 0 ? void 0 : effectData.fill) !== null && _effectData_fill !== void 0 ? _effectData_fill : particlesOptions.effect.fill;\n        var _effectData_close;\n        this.effectClose = (_effectData_close = effectData === null || effectData === void 0 ? void 0 : effectData.close) !== null && _effectData_close !== void 0 ? _effectData_close : particlesOptions.effect.close;\n        var _shapeData_fill;\n        this.shapeFill = (_shapeData_fill = shapeData === null || shapeData === void 0 ? void 0 : shapeData.fill) !== null && _shapeData_fill !== void 0 ? _shapeData_fill : particlesOptions.shape.fill;\n        var _shapeData_close;\n        this.shapeClose = (_shapeData_close = shapeData === null || shapeData === void 0 ? void 0 : shapeData.close) !== null && _shapeData_close !== void 0 ? _shapeData_close : particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getRangeValue)(pathOptions.delay.value) * _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__.millisecondsToSeconds;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.initParticleNumericAnimationValue)(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const decayOffset = 1;\n        this.moveDecay = decayOffset - (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getRangeValue)(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer === null || effectDrawer === void 0 ? void 0 : effectDrawer.loadEffect) {\n            effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer === null || shapeDrawer === void 0 ? void 0 : shapeDrawer.loadShape) {\n            shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer === null || shapeDrawer === void 0 ? void 0 : shapeDrawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_4__.rangeColorToRgb)(this.options.shadow.color);\n        for (const updater of particles.updaters){\n            updater.init(this);\n        }\n        for (const mover of particles.movers){\n            var _mover_init;\n            (_mover_init = mover.init) === null || _mover_init === void 0 ? void 0 : _mover_init.call(mover, this);\n        }\n        effectDrawer === null || effectDrawer === void 0 ? void 0 : (_effectDrawer_particleInit = effectDrawer.particleInit) === null || _effectDrawer_particleInit === void 0 ? void 0 : _effectDrawer_particleInit.call(effectDrawer, container, this);\n        shapeDrawer === null || shapeDrawer === void 0 ? void 0 : (_shapeDrawer_particleInit = shapeDrawer.particleInit) === null || _shapeDrawer_particleInit === void 0 ? void 0 : _shapeDrawer_particleInit.call(shapeDrawer, container, this);\n        for (const [, plugin] of container.plugins){\n            var _plugin_particleCreated;\n            (_plugin_particleCreated = plugin.particleCreated) === null || _plugin_particleCreated === void 0 ? void 0 : _plugin_particleCreated.call(plugin, this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return position.x >= -radius && position.y >= -radius && position.y <= canvasSize.height + radius && position.x <= canvasSize.width + radius;\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters){\n            var _updater_reset;\n            (_updater_reset = updater.reset) === null || _updater_reset === void 0 ? void 0 : _updater_reset.call(updater, this);\n        }\n    }\n    constructor(engine, container){\n        var _this = this;\n        this.container = container;\n        this._calcPosition = function(container, position, zIndex) {\n            let tryCount = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : defaultRetryCount;\n            for (const [, plugin] of container.plugins){\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, _this) : undefined;\n                if (pluginPos) {\n                    return _Utils_Vectors_js__WEBPACK_IMPORTED_MODULE_0__.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.calcExactPositionOrRandomFromSize)({\n                size: canvasSize,\n                position: position\n            }), pos = _Utils_Vectors_js__WEBPACK_IMPORTED_MODULE_0__.Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = _this.getRadius(), outModes = _this.options.move.outModes, fixHorizontal = (outMode)=>{\n                fixOutMode({\n                    outMode,\n                    checkModes: [\n                        \"bounce\"\n                    ],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value)=>pos.x += value,\n                    radius\n                });\n            }, fixVertical = (outMode)=>{\n                fixOutMode({\n                    outMode,\n                    checkModes: [\n                        \"bounce\"\n                    ],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value)=>pos.y += value,\n                    radius\n                });\n            };\n            var _outModes_left;\n            fixHorizontal((_outModes_left = outModes.left) !== null && _outModes_left !== void 0 ? _outModes_left : outModes.default);\n            var _outModes_right;\n            fixHorizontal((_outModes_right = outModes.right) !== null && _outModes_right !== void 0 ? _outModes_right : outModes.default);\n            var _outModes_top;\n            fixVertical((_outModes_top = outModes.top) !== null && _outModes_top !== void 0 ? _outModes_top : outModes.default);\n            var _outModes_bottom;\n            fixVertical((_outModes_bottom = outModes.bottom) !== null && _outModes_bottom !== void 0 ? _outModes_bottom : outModes.default);\n            if (_this._checkOverlap(pos, tryCount)) {\n                const increment = 1;\n                return _this._calcPosition(container, undefined, zIndex, tryCount + increment);\n            }\n            return pos;\n        };\n        this._calculateVelocity = ()=>{\n            const baseVelocity = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getParticleBaseVelocity)(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n                return res;\n            }\n            const rad = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.degToRad)((0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getRangeValue)(moveOptions.angle.value)), radOffset = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.degToRad)((0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getRangeValue)(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half\n            };\n            if (!moveOptions.straight) {\n                res.angle += (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.randomInRange)((0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.setRangeValue)(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getRandom)();\n            }\n            return res;\n        };\n        this._checkOverlap = function(pos) {\n            let tryCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultRetryCount;\n            const collisionsOptions = _this.options.collisions, radius = _this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries, minRetries = 0;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(\"\".concat(_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__.errorPrefix, \" particle is overlapping and can't be placed\"));\n            }\n            return !!_this.container.particles.find((particle)=>(0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getDistance)(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color)=>{\n            if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n                return color;\n            }\n            var _this_roll_angle;\n            const rollFactor = 1, none = 0, backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor((((_this_roll_angle = this.roll.angle) !== null && _this_roll_angle !== void 0 ? _this_roll_angle : none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return (0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_6__.alterHsl)(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position)=>{\n            const container = this.container, zIndexValue = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getRangeValue)(this.options.zIndex.value), minZ = 0;\n            this.position = this._calcPosition(container, position, (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size, defaultRadius = 0;\n            var _this_options_move_center_radius, _this_options_move_center_mode;\n            this.moveCenter = {\n                ...(0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.getPosition)(this.options.move.center, canvasSize),\n                radius: (_this_options_move_center_radius = this.options.move.center.radius) !== null && _this_options_move_center_radius !== void 0 ? _this_options_move_center_radius : defaultRadius,\n                mode: (_this_options_move_center_mode = this.options.move.center.mode) !== null && _this_options_move_center_mode !== void 0 ? _this_options_move_center_mode : \"percent\"\n            };\n            this.direction = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getParticleDirectionAngle)(this.options.move.direction, this.position, this.moveCenter);\n            switch(this.options.move.direction){\n                case \"inside\":\n                    this.outType = \"inside\";\n                    break;\n                case \"outside\":\n                    this.outType = \"outside\";\n                    break;\n            }\n            this.offset = _Utils_Vectors_js__WEBPACK_IMPORTED_MODULE_0__.Vector.origin;\n        };\n        this._engine = engine;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Particle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Particles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tsparticles/engine/browser/Core/Particles.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Particles: function() { return /* binding */ Particles; }\n/* harmony export */ });\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/Utils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/Utils.js\");\n/* harmony import */ var _Utils_InteractionManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils/InteractionManager.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/InteractionManager.js\");\n/* harmony import */ var _Particle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Particle.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Particle.js\");\n/* harmony import */ var _Utils_Point_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils/Point.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/Point.js\");\n/* harmony import */ var _Utils_QuadTree_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Utils/QuadTree.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/QuadTree.js\");\n/* harmony import */ var _Utils_Ranges_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Utils/Ranges.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/Ranges.js\");\n/* harmony import */ var _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Utils/Constants.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/Constants.js\");\n\n\n\n\n\n\n\nconst qTreeCapacity = 4, squareExp = 2, defaultRemoveQuantity = 1;\nconst qTreeRectangle = (canvasSize)=>{\n    const { height, width } = canvasSize, posOffset = -0.25, sizeFactor = 1.5;\n    return new _Utils_Ranges_js__WEBPACK_IMPORTED_MODULE_5__.Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nclass Particles {\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles){\n            this.addParticle(particle.position ? (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__.getPosition)(particle.position, container.canvas.size) : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        var _this__groupLimits_get;\n        const limitOptions = this._container.actualOptions.particles.number.limit, limit = group === undefined ? this._limit : (_this__groupLimits_get = this._groupLimits.get(group)) !== null && _this__groupLimits_get !== void 0 ? _this__groupLimits_get : this._limit, currentCount = this.count, minLimit = 0;\n        if (limit > minLimit) {\n            if (limitOptions.mode === \"delete\") {\n                const countOffset = 1, minCount = 0, countToRemove = currentCount + countOffset - limit;\n                if (countToRemove > minCount) {\n                    this.removeQuantity(countToRemove);\n                }\n            } else if (limitOptions.mode === \"wait\") {\n                if (currentCount >= limit) {\n                    return;\n                }\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n        this._pluginsInitialized = false;\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    draw(delta) {\n        const container = this._container, canvas = container.canvas;\n        canvas.clear();\n        this.update(delta);\n        for (const [, plugin] of container.plugins){\n            canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray){\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    get(index) {\n        return this._array[index];\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions;\n        this._lastZIndex = 0;\n        this._needsSort = false;\n        await this.initPlugins();\n        let handled = false;\n        for (const [, plugin] of container.plugins){\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            const particlesOptions = options.particles, groups = particlesOptions.groups;\n            for(const group in groups){\n                var _groupOptions_number;\n                const groupOptions = groups[group];\n                for(let i = this.count, j = 0; j < ((_groupOptions_number = groupOptions.number) === null || _groupOptions_number === void 0 ? void 0 : _groupOptions_number.value) && i < particlesOptions.number.value; i++, j++){\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for(let i = this.count; i < particlesOptions.number.value; i++){\n                this.addParticle();\n            }\n        }\n    }\n    async initPlugins() {\n        if (this._pluginsInitialized) {\n            return;\n        }\n        const container = this._container;\n        this.movers = await this._engine.getMovers(container, true);\n        this.updaters = await this._engine.getUpdaters(container, true);\n        await this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators){\n            pathGenerator.init(container);\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        for(let i = 0; i < nb; i++){\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n    }\n    async redraw() {\n        this.clear();\n        await this.init();\n        this.draw({\n            value: 0,\n            factor: 0\n        });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index) {\n        let quantity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultRemoveQuantity, group = arguments.length > 2 ? arguments[2] : void 0, override = arguments.length > 3 ? arguments[3] : void 0;\n        const minIndex = 0;\n        if (index < minIndex || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for(let i = index; deleted < quantity && i < this.count; i++){\n            if (this._removeParticle(i--, group, override)) {\n                deleted++;\n            }\n        }\n    }\n    removeQuantity(quantity, group) {\n        const defaultIndex = 0;\n        this.removeAt(defaultIndex, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups, manualCount = 0;\n        for(const group in groups){\n            this._applyDensity(groups[group], manualCount, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    setLastZIndex(zIndex) {\n        this._lastZIndex = zIndex;\n        this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n    }\n    setResizeFactor(factor) {\n        this._resizeFactor = factor;\n    }\n    update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new _Utils_QuadTree_js__WEBPACK_IMPORTED_MODULE_4__.QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const [, pathGenerator] of container.pathGenerators){\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins){\n            var _plugin_update;\n            (_plugin_update = plugin.update) === null || _plugin_update === void 0 ? void 0 : _plugin_update.call(plugin, delta);\n        }\n        const resizeFactor = this._resizeFactor;\n        for (const particle of this._array){\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins){\n                var _plugin_particleUpdate;\n                if (particle.destroyed) {\n                    break;\n                }\n                (_plugin_particleUpdate = plugin.particleUpdate) === null || _plugin_particleUpdate === void 0 ? void 0 : _plugin_particleUpdate.call(plugin, particle, delta);\n            }\n            for (const mover of this.movers){\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new _Utils_Point_js__WEBPACK_IMPORTED_MODULE_3__.Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p)=>!particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            for (const particle of particlesToDelete){\n                this._engine.dispatchEvent(\"particleRemoved\", {\n                    container: this._container,\n                    data: {\n                        particle\n                    }\n                });\n            }\n            this._addToPool(...particlesToDelete);\n        }\n        this._interactionManager.externalInteract(delta);\n        for (const particle of this._array){\n            for (const updater of this.updaters){\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete this._resizeFactor;\n        if (this._needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b)=>b.position.z - a.position.z || a.id - b.id);\n            const lengthOffset = 1;\n            this._lastZIndex = zArray[zArray.length - lengthOffset].position.z;\n            this._needsSort = false;\n        }\n    }\n    constructor(engine, container){\n        var _this = this;\n        this._addToPool = function() {\n            for(var _len = arguments.length, particles = new Array(_len), _key = 0; _key < _len; _key++){\n                particles[_key] = arguments[_key];\n            }\n            for (const particle of particles){\n                _this._pool.push(particle);\n            }\n        };\n        this._applyDensity = (options, manualCount, group)=>{\n            var _options_number_density;\n            const numberOptions = options.number;\n            if (!((_options_number_density = options.number.density) === null || _options_number_density === void 0 ? void 0 : _options_number_density.enable)) {\n                if (group === undefined) {\n                    this._limit = numberOptions.limit.value;\n                } else if (numberOptions.limit) {\n                    this._groupLimits.set(group, numberOptions.limit.value);\n                }\n                return;\n            }\n            const densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, minLimit = 0, optParticlesLimit = numberOptions.limit.value > minLimit ? numberOptions.limit.value : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t)=>t.group === group).length);\n            if (group === undefined) {\n                this._limit = numberOptions.limit.value * densityFactor;\n            } else {\n                this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n            }\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            } else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions)=>{\n            const container = this._container, defaultFactor = 1;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return defaultFactor;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return canvas.width * canvas.height / (densityOptions.height * densityOptions.width * pxRatio ** squareExp);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer)=>{\n            try {\n                let particle = this._pool.pop();\n                if (!particle) {\n                    particle = new _Particle_js__WEBPACK_IMPORTED_MODULE_2__.Particle(this._engine, this._container);\n                }\n                particle.init(this._nextId, position, overrideOptions, group);\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle\n                    }\n                });\n                return particle;\n            } catch (e) {\n                (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__.getLogger)().warning(\"\".concat(_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.errorPrefix, \" adding particle: \").concat(e));\n            }\n        };\n        this._removeParticle = (index, group, override)=>{\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            const zIdx = this._zArray.indexOf(particle), deleteCount = 1;\n            this._array.splice(index, deleteCount);\n            this._zArray.splice(zIdx, deleteCount);\n            particle.destroy(override);\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle\n                }\n            });\n            this._addToPool(particle);\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this._pool = [];\n        this._limit = 0;\n        this._groupLimits = new Map();\n        this._needsSort = false;\n        this._lastZIndex = 0;\n        this._interactionManager = new _Utils_InteractionManager_js__WEBPACK_IMPORTED_MODULE_1__.InteractionManager(engine, container);\n        this._pluginsInitialized = false;\n        const canvasSize = container.canvas.size;\n        this.quadTree = new _Utils_QuadTree_js__WEBPACK_IMPORTED_MODULE_4__.QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = [];\n        this.updaters = [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Particles.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Retina.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tsparticles/engine/browser/Core/Retina.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Retina: function() { return /* binding */ Retina; }\n/* harmony export */ });\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/NumberUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js\");\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/Utils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/Utils.js\");\n\n\nconst defaultRatio = 1, defaultReduceFactor = 1;\nclass Retina {\n    init() {\n        const container = this.container, options = container.actualOptions;\n        this.pixelRatio = !options.detectRetina || (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__.isSsr)() ? defaultRatio : window.devicePixelRatio;\n        this.reduceFactor = defaultReduceFactor;\n        const ratio = this.pixelRatio, canvas = container.canvas;\n        if (canvas.element) {\n            const element = canvas.element;\n            canvas.size.width = element.offsetWidth * ratio;\n            canvas.size.height = element.offsetHeight * ratio;\n        }\n        const particles = options.particles, moveOptions = particles.move;\n        this.maxSpeed = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(moveOptions.gravity.maxSpeed) * ratio;\n        this.sizeAnimationSpeed = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(particles.size.animation.speed) * ratio;\n    }\n    initParticle(particle) {\n        const options = particle.options, ratio = this.pixelRatio, moveOptions = options.move, moveDistance = moveOptions.distance, props = particle.retina;\n        props.moveDrift = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(moveOptions.drift) * ratio;\n        props.moveSpeed = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(moveOptions.speed) * ratio;\n        props.sizeAnimationSpeed = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(options.size.animation.speed) * ratio;\n        const maxDistance = props.maxDistance;\n        maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n        maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n        props.maxSpeed = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(moveOptions.gravity.maxSpeed) * ratio;\n    }\n    constructor(container){\n        this.container = container;\n        this.pixelRatio = defaultRatio;\n        this.reduceFactor = defaultReduceFactor;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdHNwYXJ0aWNsZXMvZW5naW5lL2Jyb3dzZXIvQ29yZS9SZXRpbmEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQ2Q7QUFDMUMsTUFBTUUsZUFBZSxHQUFHQyxzQkFBc0I7QUFDdkMsTUFBTUM7SUFNVEMsT0FBTztRQUNILE1BQU1DLFlBQVksSUFBSSxDQUFDQSxTQUFTLEVBQUVDLFVBQVVELFVBQVVFLGFBQWE7UUFDbkUsSUFBSSxDQUFDQyxVQUFVLEdBQUcsQ0FBQ0YsUUFBUUcsWUFBWSxJQUFJVCxzREFBS0EsS0FBS0MsZUFBZVMsT0FBT0MsZ0JBQWdCO1FBQzNGLElBQUksQ0FBQ0MsWUFBWSxHQUFHVjtRQUNwQixNQUFNVyxRQUFRLElBQUksQ0FBQ0wsVUFBVSxFQUFFTSxTQUFTVCxVQUFVUyxNQUFNO1FBQ3hELElBQUlBLE9BQU9DLE9BQU8sRUFBRTtZQUNoQixNQUFNQSxVQUFVRCxPQUFPQyxPQUFPO1lBQzlCRCxPQUFPRSxJQUFJLENBQUNDLEtBQUssR0FBR0YsUUFBUUcsV0FBVyxHQUFHTDtZQUMxQ0MsT0FBT0UsSUFBSSxDQUFDRyxNQUFNLEdBQUdKLFFBQVFLLFlBQVksR0FBR1A7UUFDaEQ7UUFDQSxNQUFNUSxZQUFZZixRQUFRZSxTQUFTLEVBQUVDLGNBQWNELFVBQVVFLElBQUk7UUFDakUsSUFBSSxDQUFDQyxRQUFRLEdBQUd6QixvRUFBYUEsQ0FBQ3VCLFlBQVlHLE9BQU8sQ0FBQ0QsUUFBUSxJQUFJWDtRQUM5RCxJQUFJLENBQUNhLGtCQUFrQixHQUFHM0Isb0VBQWFBLENBQUNzQixVQUFVTCxJQUFJLENBQUNXLFNBQVMsQ0FBQ0MsS0FBSyxJQUFJZjtJQUM5RTtJQUNBZ0IsYUFBYUMsUUFBUSxFQUFFO1FBQ25CLE1BQU14QixVQUFVd0IsU0FBU3hCLE9BQU8sRUFBRU8sUUFBUSxJQUFJLENBQUNMLFVBQVUsRUFBRWMsY0FBY2hCLFFBQVFpQixJQUFJLEVBQUVRLGVBQWVULFlBQVlVLFFBQVEsRUFBRUMsUUFBUUgsU0FBU0ksTUFBTTtRQUNuSkQsTUFBTUUsU0FBUyxHQUFHcEMsb0VBQWFBLENBQUN1QixZQUFZYyxLQUFLLElBQUl2QjtRQUNyRG9CLE1BQU1JLFNBQVMsR0FBR3RDLG9FQUFhQSxDQUFDdUIsWUFBWU0sS0FBSyxJQUFJZjtRQUNyRG9CLE1BQU1QLGtCQUFrQixHQUFHM0Isb0VBQWFBLENBQUNPLFFBQVFVLElBQUksQ0FBQ1csU0FBUyxDQUFDQyxLQUFLLElBQUlmO1FBQ3pFLE1BQU15QixjQUFjTCxNQUFNSyxXQUFXO1FBQ3JDQSxZQUFZQyxVQUFVLEdBQUdSLGFBQWFRLFVBQVUsS0FBS0MsWUFBWVQsYUFBYVEsVUFBVSxHQUFHMUIsUUFBUTJCO1FBQ25HRixZQUFZRyxRQUFRLEdBQUdWLGFBQWFVLFFBQVEsS0FBS0QsWUFBWVQsYUFBYVUsUUFBUSxHQUFHNUIsUUFBUTJCO1FBQzdGUCxNQUFNVCxRQUFRLEdBQUd6QixvRUFBYUEsQ0FBQ3VCLFlBQVlHLE9BQU8sQ0FBQ0QsUUFBUSxJQUFJWDtJQUNuRTtJQTVCQTZCLFlBQVlyQyxTQUFTLENBQUU7UUFDbkIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0csVUFBVSxHQUFHUDtRQUNsQixJQUFJLENBQUNXLFlBQVksR0FBR1Y7SUFDeEI7QUF5QkoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B0c3BhcnRpY2xlcy9lbmdpbmUvYnJvd3Nlci9Db3JlL1JldGluYS5qcz9kOTZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFJhbmdlVmFsdWUgfSBmcm9tIFwiLi4vVXRpbHMvTnVtYmVyVXRpbHMuanNcIjtcbmltcG9ydCB7IGlzU3NyIH0gZnJvbSBcIi4uL1V0aWxzL1V0aWxzLmpzXCI7XG5jb25zdCBkZWZhdWx0UmF0aW8gPSAxLCBkZWZhdWx0UmVkdWNlRmFjdG9yID0gMTtcbmV4cG9ydCBjbGFzcyBSZXRpbmEge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5waXhlbFJhdGlvID0gZGVmYXVsdFJhdGlvO1xuICAgICAgICB0aGlzLnJlZHVjZUZhY3RvciA9IGRlZmF1bHRSZWR1Y2VGYWN0b3I7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIHRoaXMucGl4ZWxSYXRpbyA9ICFvcHRpb25zLmRldGVjdFJldGluYSB8fCBpc1NzcigpID8gZGVmYXVsdFJhdGlvIDogd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIHRoaXMucmVkdWNlRmFjdG9yID0gZGVmYXVsdFJlZHVjZUZhY3RvcjtcbiAgICAgICAgY29uc3QgcmF0aW8gPSB0aGlzLnBpeGVsUmF0aW8sIGNhbnZhcyA9IGNvbnRhaW5lci5jYW52YXM7XG4gICAgICAgIGlmIChjYW52YXMuZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNhbnZhcy5lbGVtZW50O1xuICAgICAgICAgICAgY2FudmFzLnNpemUud2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoICogcmF0aW87XG4gICAgICAgICAgICBjYW52YXMuc2l6ZS5oZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAqIHJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlcyA9IG9wdGlvbnMucGFydGljbGVzLCBtb3ZlT3B0aW9ucyA9IHBhcnRpY2xlcy5tb3ZlO1xuICAgICAgICB0aGlzLm1heFNwZWVkID0gZ2V0UmFuZ2VWYWx1ZShtb3ZlT3B0aW9ucy5ncmF2aXR5Lm1heFNwZWVkKSAqIHJhdGlvO1xuICAgICAgICB0aGlzLnNpemVBbmltYXRpb25TcGVlZCA9IGdldFJhbmdlVmFsdWUocGFydGljbGVzLnNpemUuYW5pbWF0aW9uLnNwZWVkKSAqIHJhdGlvO1xuICAgIH1cbiAgICBpbml0UGFydGljbGUocGFydGljbGUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHBhcnRpY2xlLm9wdGlvbnMsIHJhdGlvID0gdGhpcy5waXhlbFJhdGlvLCBtb3ZlT3B0aW9ucyA9IG9wdGlvbnMubW92ZSwgbW92ZURpc3RhbmNlID0gbW92ZU9wdGlvbnMuZGlzdGFuY2UsIHByb3BzID0gcGFydGljbGUucmV0aW5hO1xuICAgICAgICBwcm9wcy5tb3ZlRHJpZnQgPSBnZXRSYW5nZVZhbHVlKG1vdmVPcHRpb25zLmRyaWZ0KSAqIHJhdGlvO1xuICAgICAgICBwcm9wcy5tb3ZlU3BlZWQgPSBnZXRSYW5nZVZhbHVlKG1vdmVPcHRpb25zLnNwZWVkKSAqIHJhdGlvO1xuICAgICAgICBwcm9wcy5zaXplQW5pbWF0aW9uU3BlZWQgPSBnZXRSYW5nZVZhbHVlKG9wdGlvbnMuc2l6ZS5hbmltYXRpb24uc3BlZWQpICogcmF0aW87XG4gICAgICAgIGNvbnN0IG1heERpc3RhbmNlID0gcHJvcHMubWF4RGlzdGFuY2U7XG4gICAgICAgIG1heERpc3RhbmNlLmhvcml6b250YWwgPSBtb3ZlRGlzdGFuY2UuaG9yaXpvbnRhbCAhPT0gdW5kZWZpbmVkID8gbW92ZURpc3RhbmNlLmhvcml6b250YWwgKiByYXRpbyA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWF4RGlzdGFuY2UudmVydGljYWwgPSBtb3ZlRGlzdGFuY2UudmVydGljYWwgIT09IHVuZGVmaW5lZCA/IG1vdmVEaXN0YW5jZS52ZXJ0aWNhbCAqIHJhdGlvIDogdW5kZWZpbmVkO1xuICAgICAgICBwcm9wcy5tYXhTcGVlZCA9IGdldFJhbmdlVmFsdWUobW92ZU9wdGlvbnMuZ3Jhdml0eS5tYXhTcGVlZCkgKiByYXRpbztcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiZ2V0UmFuZ2VWYWx1ZSIsImlzU3NyIiwiZGVmYXVsdFJhdGlvIiwiZGVmYXVsdFJlZHVjZUZhY3RvciIsIlJldGluYSIsImluaXQiLCJjb250YWluZXIiLCJvcHRpb25zIiwiYWN0dWFsT3B0aW9ucyIsInBpeGVsUmF0aW8iLCJkZXRlY3RSZXRpbmEiLCJ3aW5kb3ciLCJkZXZpY2VQaXhlbFJhdGlvIiwicmVkdWNlRmFjdG9yIiwicmF0aW8iLCJjYW52YXMiLCJlbGVtZW50Iiwic2l6ZSIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJoZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJwYXJ0aWNsZXMiLCJtb3ZlT3B0aW9ucyIsIm1vdmUiLCJtYXhTcGVlZCIsImdyYXZpdHkiLCJzaXplQW5pbWF0aW9uU3BlZWQiLCJhbmltYXRpb24iLCJzcGVlZCIsImluaXRQYXJ0aWNsZSIsInBhcnRpY2xlIiwibW92ZURpc3RhbmNlIiwiZGlzdGFuY2UiLCJwcm9wcyIsInJldGluYSIsIm1vdmVEcmlmdCIsImRyaWZ0IiwibW92ZVNwZWVkIiwibWF4RGlzdGFuY2UiLCJob3Jpem9udGFsIiwidW5kZWZpbmVkIiwidmVydGljYWwiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Retina.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/EventListeners.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tsparticles/engine/browser/Core/Utils/EventListeners.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventListeners: function() { return /* binding */ EventListeners; }\n/* harmony export */ });\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/Utils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/Utils.js\");\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Constants.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/Constants.js\");\n/* harmony import */ var _Utils_TypeUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Utils/TypeUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/TypeUtils.js\");\n\n\n\nconst double = 2;\nfunction manageListener(element, event, handler, add, options) {\n    if (add) {\n        let addOptions = {\n            passive: true\n        };\n        if ((0,_Utils_TypeUtils_js__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(options)) {\n            addOptions.capture = options;\n        } else if (options !== undefined) {\n            addOptions = options;\n        }\n        element.addEventListener(event, handler, addOptions);\n    } else {\n        const removeOptions = options;\n        element.removeEventListener(event, handler, removeOptions);\n    }\n}\nclass EventListeners {\n    addListeners() {\n        this._manageListeners(true);\n    }\n    removeListeners() {\n        this._manageListeners(false);\n    }\n    constructor(container){\n        this.container = container;\n        this._doMouseTouchClick = (e)=>{\n            const container = this.container, options = container.actualOptions;\n            if (this._canPush) {\n                const mouseInteractivity = container.interactivity.mouse, mousePos = mouseInteractivity.position;\n                if (!mousePos) {\n                    return;\n                }\n                mouseInteractivity.clickPosition = {\n                    ...mousePos\n                };\n                mouseInteractivity.clickTime = new Date().getTime();\n                const onClick = options.interactivity.events.onClick;\n                (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__.executeOnSingleOrMultiple)(onClick.mode, (mode)=>this.container.handleClickMode(mode));\n            }\n            if (e.type === \"touchend\") {\n                const touchDelay = 500;\n                setTimeout(()=>this._mouseTouchFinish(), touchDelay);\n            }\n        };\n        this._handleThemeChange = (e)=>{\n            const mediaEvent = e, container = this.container, options = container.options, defaultThemes = options.defaultThemes, themeName = mediaEvent.matches ? defaultThemes.dark : defaultThemes.light, theme = options.themes.find((theme)=>theme.name === themeName);\n            if (theme && theme.default.auto) {\n                void container.loadTheme(themeName);\n            }\n        };\n        this._handleVisibilityChange = ()=>{\n            const container = this.container, options = container.actualOptions;\n            this._mouseTouchFinish();\n            if (!options.pauseOnBlur) {\n                return;\n            }\n            if (document && document.hidden) {\n                container.pageHidden = true;\n                container.pause();\n            } else {\n                container.pageHidden = false;\n                if (container.animationStatus) {\n                    void container.play(true);\n                } else {\n                    void container.draw(true);\n                }\n            }\n        };\n        this._handleWindowResize = ()=>{\n            if (this._resizeTimeout) {\n                clearTimeout(this._resizeTimeout);\n                delete this._resizeTimeout;\n            }\n            const handleResize = async ()=>{\n                const canvas = this.container.canvas;\n                await (canvas === null || canvas === void 0 ? void 0 : canvas.windowResize());\n            };\n            this._resizeTimeout = setTimeout(()=>void handleResize(), this.container.actualOptions.interactivity.events.resize.delay * _Constants_js__WEBPACK_IMPORTED_MODULE_1__.millisecondsToSeconds);\n        };\n        this._manageInteractivityListeners = (mouseLeaveTmpEvent, add)=>{\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            const interactivityEl = container.interactivity.element;\n            if (!interactivityEl) {\n                return;\n            }\n            const html = interactivityEl, canvasEl = container.canvas.element;\n            if (canvasEl) {\n                canvasEl.style.pointerEvents = html === canvasEl ? \"initial\" : \"none\";\n            }\n            if (!(options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable)) {\n                return;\n            }\n            manageListener(interactivityEl, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.mouseMoveEvent, handlers.mouseMove, add);\n            manageListener(interactivityEl, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.touchStartEvent, handlers.touchStart, add);\n            manageListener(interactivityEl, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.touchMoveEvent, handlers.touchMove, add);\n            if (!options.interactivity.events.onClick.enable) {\n                manageListener(interactivityEl, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.touchEndEvent, handlers.touchEnd, add);\n            } else {\n                manageListener(interactivityEl, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.touchEndEvent, handlers.touchEndClick, add);\n                manageListener(interactivityEl, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.mouseUpEvent, handlers.mouseUp, add);\n                manageListener(interactivityEl, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.mouseDownEvent, handlers.mouseDown, add);\n            }\n            manageListener(interactivityEl, mouseLeaveTmpEvent, handlers.mouseLeave, add);\n            manageListener(interactivityEl, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.touchCancelEvent, handlers.touchCancel, add);\n        };\n        this._manageListeners = (add)=>{\n            const handlers = this._handlers, container = this.container, options = container.actualOptions, detectType = options.interactivity.detectsOn, canvasEl = container.canvas.element;\n            let mouseLeaveTmpEvent = _Constants_js__WEBPACK_IMPORTED_MODULE_1__.mouseLeaveEvent;\n            if (detectType === \"window\") {\n                container.interactivity.element = window;\n                mouseLeaveTmpEvent = _Constants_js__WEBPACK_IMPORTED_MODULE_1__.mouseOutEvent;\n            } else if (detectType === \"parent\" && canvasEl) {\n                var _canvasEl_parentElement;\n                container.interactivity.element = (_canvasEl_parentElement = canvasEl.parentElement) !== null && _canvasEl_parentElement !== void 0 ? _canvasEl_parentElement : canvasEl.parentNode;\n            } else {\n                container.interactivity.element = canvasEl;\n            }\n            this._manageMediaMatch(add);\n            this._manageResize(add);\n            this._manageInteractivityListeners(mouseLeaveTmpEvent, add);\n            if (document) {\n                manageListener(document, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.visibilityChangeEvent, handlers.visibilityChange, add, false);\n            }\n        };\n        this._manageMediaMatch = (add)=>{\n            const handlers = this._handlers, mediaMatch = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__.safeMatchMedia)(\"(prefers-color-scheme: dark)\");\n            if (!mediaMatch) {\n                return;\n            }\n            if (mediaMatch.addEventListener !== undefined) {\n                manageListener(mediaMatch, \"change\", handlers.themeChange, add);\n                return;\n            }\n            if (mediaMatch.addListener === undefined) {\n                return;\n            }\n            if (add) {\n                mediaMatch.addListener(handlers.oldThemeChange);\n            } else {\n                mediaMatch.removeListener(handlers.oldThemeChange);\n            }\n        };\n        this._manageResize = (add)=>{\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            if (!options.interactivity.events.resize) {\n                return;\n            }\n            if (typeof ResizeObserver === \"undefined\") {\n                manageListener(window, _Constants_js__WEBPACK_IMPORTED_MODULE_1__.resizeEvent, handlers.resize, add);\n                return;\n            }\n            const canvasEl = container.canvas.element;\n            if (this._resizeObserver && !add) {\n                if (canvasEl) {\n                    this._resizeObserver.unobserve(canvasEl);\n                }\n                this._resizeObserver.disconnect();\n                delete this._resizeObserver;\n            } else if (!this._resizeObserver && add && canvasEl) {\n                this._resizeObserver = new ResizeObserver((entries)=>{\n                    const entry = entries.find((e)=>e.target === canvasEl);\n                    if (!entry) {\n                        return;\n                    }\n                    this._handleWindowResize();\n                });\n                this._resizeObserver.observe(canvasEl);\n            }\n        };\n        this._mouseDown = ()=>{\n            const { interactivity } = this.container;\n            if (!interactivity) {\n                return;\n            }\n            const { mouse } = interactivity;\n            mouse.clicking = true;\n            mouse.downPosition = mouse.position;\n        };\n        this._mouseTouchClick = (e)=>{\n            const container = this.container, options = container.actualOptions, { mouse } = container.interactivity;\n            mouse.inside = true;\n            let handled = false;\n            const mousePosition = mouse.position;\n            if (!mousePosition || !options.interactivity.events.onClick.enable) {\n                return;\n            }\n            for (const [, plugin] of container.plugins){\n                if (!plugin.clickPositionValid) {\n                    continue;\n                }\n                handled = plugin.clickPositionValid(mousePosition);\n                if (handled) {\n                    break;\n                }\n            }\n            if (!handled) {\n                this._doMouseTouchClick(e);\n            }\n            mouse.clicking = false;\n        };\n        this._mouseTouchFinish = ()=>{\n            const interactivity = this.container.interactivity;\n            if (!interactivity) {\n                return;\n            }\n            const mouse = interactivity.mouse;\n            delete mouse.position;\n            delete mouse.clickPosition;\n            delete mouse.downPosition;\n            interactivity.status = _Constants_js__WEBPACK_IMPORTED_MODULE_1__.mouseLeaveEvent;\n            mouse.inside = false;\n            mouse.clicking = false;\n        };\n        this._mouseTouchMove = (e)=>{\n            const container = this.container, options = container.actualOptions, interactivity = container.interactivity, canvasEl = container.canvas.element;\n            if (!(interactivity === null || interactivity === void 0 ? void 0 : interactivity.element)) {\n                return;\n            }\n            interactivity.mouse.inside = true;\n            let pos;\n            if (e.type.startsWith(\"pointer\")) {\n                this._canPush = true;\n                const mouseEvent = e;\n                if (interactivity.element === window) {\n                    if (canvasEl) {\n                        const clientRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.clientX - clientRect.left,\n                            y: mouseEvent.clientY - clientRect.top\n                        };\n                    }\n                } else if (options.interactivity.detectsOn === \"parent\") {\n                    const source = mouseEvent.target, target = mouseEvent.currentTarget;\n                    if (source && target && canvasEl) {\n                        const sourceRect = source.getBoundingClientRect(), targetRect = target.getBoundingClientRect(), canvasRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.offsetX + double * sourceRect.left - (targetRect.left + canvasRect.left),\n                            y: mouseEvent.offsetY + double * sourceRect.top - (targetRect.top + canvasRect.top)\n                        };\n                    } else {\n                        var _mouseEvent_offsetX, _mouseEvent_offsetY;\n                        pos = {\n                            x: (_mouseEvent_offsetX = mouseEvent.offsetX) !== null && _mouseEvent_offsetX !== void 0 ? _mouseEvent_offsetX : mouseEvent.clientX,\n                            y: (_mouseEvent_offsetY = mouseEvent.offsetY) !== null && _mouseEvent_offsetY !== void 0 ? _mouseEvent_offsetY : mouseEvent.clientY\n                        };\n                    }\n                } else if (mouseEvent.target === canvasEl) {\n                    var _mouseEvent_offsetX1, _mouseEvent_offsetY1;\n                    pos = {\n                        x: (_mouseEvent_offsetX1 = mouseEvent.offsetX) !== null && _mouseEvent_offsetX1 !== void 0 ? _mouseEvent_offsetX1 : mouseEvent.clientX,\n                        y: (_mouseEvent_offsetY1 = mouseEvent.offsetY) !== null && _mouseEvent_offsetY1 !== void 0 ? _mouseEvent_offsetY1 : mouseEvent.clientY\n                    };\n                }\n            } else {\n                this._canPush = e.type !== \"touchmove\";\n                if (canvasEl) {\n                    const touchEvent = e, lengthOffset = 1, lastTouch = touchEvent.touches[touchEvent.touches.length - lengthOffset], canvasRect = canvasEl.getBoundingClientRect(), defaultCoordinate = 0;\n                    var _canvasRect_left, _canvasRect_top;\n                    pos = {\n                        x: lastTouch.clientX - ((_canvasRect_left = canvasRect.left) !== null && _canvasRect_left !== void 0 ? _canvasRect_left : defaultCoordinate),\n                        y: lastTouch.clientY - ((_canvasRect_top = canvasRect.top) !== null && _canvasRect_top !== void 0 ? _canvasRect_top : defaultCoordinate)\n                    };\n                }\n            }\n            const pxRatio = container.retina.pixelRatio;\n            if (pos) {\n                pos.x *= pxRatio;\n                pos.y *= pxRatio;\n            }\n            interactivity.mouse.position = pos;\n            interactivity.status = _Constants_js__WEBPACK_IMPORTED_MODULE_1__.mouseMoveEvent;\n        };\n        this._touchEnd = (e)=>{\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches){\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchFinish();\n        };\n        this._touchEndClick = (e)=>{\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches){\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchClick(e);\n        };\n        this._touchStart = (e)=>{\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches){\n                this._touches.set(touch.identifier, performance.now());\n            }\n            this._mouseTouchMove(e);\n        };\n        this._canPush = true;\n        this._touches = new Map();\n        this._handlers = {\n            mouseDown: ()=>this._mouseDown(),\n            mouseLeave: ()=>this._mouseTouchFinish(),\n            mouseMove: (e)=>this._mouseTouchMove(e),\n            mouseUp: (e)=>this._mouseTouchClick(e),\n            touchStart: (e)=>this._touchStart(e),\n            touchMove: (e)=>this._mouseTouchMove(e),\n            touchEnd: (e)=>this._touchEnd(e),\n            touchCancel: (e)=>this._touchEnd(e),\n            touchEndClick: (e)=>this._touchEndClick(e),\n            visibilityChange: ()=>this._handleVisibilityChange(),\n            themeChange: (e)=>this._handleThemeChange(e),\n            oldThemeChange: (e)=>this._handleThemeChange(e),\n            resize: ()=>{\n                this._handleWindowResize();\n            }\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/EventListeners.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/InteractionManager.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tsparticles/engine/browser/Core/Utils/InteractionManager.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InteractionManager: function() { return /* binding */ InteractionManager; }\n/* harmony export */ });\nclass InteractionManager {\n    externalInteract(delta) {\n        for (const interactor of this._externalInteractors){\n            if (interactor.isEnabled()) {\n                interactor.interact(delta);\n            }\n        }\n    }\n    handleClickMode(mode) {\n        for (const interactor of this._externalInteractors){\n            var _interactor_handleClickMode;\n            (_interactor_handleClickMode = interactor.handleClickMode) === null || _interactor_handleClickMode === void 0 ? void 0 : _interactor_handleClickMode.call(interactor, mode);\n        }\n    }\n    async init() {\n        this._interactors = await this._engine.getInteractors(this.container, true);\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n        for (const interactor of this._interactors){\n            switch(interactor.type){\n                case \"external\":\n                    this._externalInteractors.push(interactor);\n                    break;\n                case \"particles\":\n                    this._particleInteractors.push(interactor);\n                    break;\n            }\n            interactor.init();\n        }\n    }\n    particlesInteract(particle, delta) {\n        for (const interactor of this._externalInteractors){\n            interactor.clear(particle, delta);\n        }\n        for (const interactor of this._particleInteractors){\n            if (interactor.isEnabled(particle)) {\n                interactor.interact(particle, delta);\n            }\n        }\n    }\n    reset(particle) {\n        for (const interactor of this._externalInteractors){\n            if (interactor.isEnabled()) {\n                interactor.reset(particle);\n            }\n        }\n        for (const interactor of this._particleInteractors){\n            if (interactor.isEnabled(particle)) {\n                interactor.reset(particle);\n            }\n        }\n    }\n    constructor(engine, container){\n        this.container = container;\n        this._engine = engine;\n        this._interactors = [];\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdHNwYXJ0aWNsZXMvZW5naW5lL2Jyb3dzZXIvQ29yZS9VdGlscy9JbnRlcmFjdGlvbk1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BO0lBUVRDLGlCQUFpQkMsS0FBSyxFQUFFO1FBQ3BCLEtBQUssTUFBTUMsY0FBYyxJQUFJLENBQUNDLG9CQUFvQixDQUFFO1lBQ2hELElBQUlELFdBQVdFLFNBQVMsSUFBSTtnQkFDeEJGLFdBQVdHLFFBQVEsQ0FBQ0o7WUFDeEI7UUFDSjtJQUNKO0lBQ0FLLGdCQUFnQkMsSUFBSSxFQUFFO1FBQ2xCLEtBQUssTUFBTUwsY0FBYyxJQUFJLENBQUNDLG9CQUFvQixDQUFFO2dCQUNoREQ7YUFBQUEsOEJBQUFBLFdBQVdJLGVBQWUsY0FBMUJKLGtEQUFBQSxpQ0FBQUEsWUFBNkJLO1FBQ2pDO0lBQ0o7SUFDQSxNQUFNQyxPQUFPO1FBQ1QsSUFBSSxDQUFDQyxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDLElBQUksQ0FBQ0MsU0FBUyxFQUFFO1FBQ3RFLElBQUksQ0FBQ1Qsb0JBQW9CLEdBQUcsRUFBRTtRQUM5QixJQUFJLENBQUNVLG9CQUFvQixHQUFHLEVBQUU7UUFDOUIsS0FBSyxNQUFNWCxjQUFjLElBQUksQ0FBQ08sWUFBWSxDQUFFO1lBQ3hDLE9BQVFQLFdBQVdZLElBQUk7Z0JBQ25CLEtBQUs7b0JBQ0QsSUFBSSxDQUFDWCxvQkFBb0IsQ0FBQ1ksSUFBSSxDQUFDYjtvQkFDL0I7Z0JBQ0osS0FBSztvQkFDRCxJQUFJLENBQUNXLG9CQUFvQixDQUFDRSxJQUFJLENBQUNiO29CQUMvQjtZQUNSO1lBQ0FBLFdBQVdNLElBQUk7UUFDbkI7SUFDSjtJQUNBUSxrQkFBa0JDLFFBQVEsRUFBRWhCLEtBQUssRUFBRTtRQUMvQixLQUFLLE1BQU1DLGNBQWMsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBRTtZQUNoREQsV0FBV2dCLEtBQUssQ0FBQ0QsVUFBVWhCO1FBQy9CO1FBQ0EsS0FBSyxNQUFNQyxjQUFjLElBQUksQ0FBQ1csb0JBQW9CLENBQUU7WUFDaEQsSUFBSVgsV0FBV0UsU0FBUyxDQUFDYSxXQUFXO2dCQUNoQ2YsV0FBV0csUUFBUSxDQUFDWSxVQUFVaEI7WUFDbEM7UUFDSjtJQUNKO0lBQ0FrQixNQUFNRixRQUFRLEVBQUU7UUFDWixLQUFLLE1BQU1mLGNBQWMsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBRTtZQUNoRCxJQUFJRCxXQUFXRSxTQUFTLElBQUk7Z0JBQ3hCRixXQUFXaUIsS0FBSyxDQUFDRjtZQUNyQjtRQUNKO1FBQ0EsS0FBSyxNQUFNZixjQUFjLElBQUksQ0FBQ1csb0JBQW9CLENBQUU7WUFDaEQsSUFBSVgsV0FBV0UsU0FBUyxDQUFDYSxXQUFXO2dCQUNoQ2YsV0FBV2lCLEtBQUssQ0FBQ0Y7WUFDckI7UUFDSjtJQUNKO0lBeERBRyxZQUFZQyxNQUFNLEVBQUVULFNBQVMsQ0FBRTtRQUMzQixJQUFJLENBQUNBLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDRixPQUFPLEdBQUdXO1FBQ2YsSUFBSSxDQUFDWixZQUFZLEdBQUcsRUFBRTtRQUN0QixJQUFJLENBQUNOLG9CQUFvQixHQUFHLEVBQUU7UUFDOUIsSUFBSSxDQUFDVSxvQkFBb0IsR0FBRyxFQUFFO0lBQ2xDO0FBbURKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdHNwYXJ0aWNsZXMvZW5naW5lL2Jyb3dzZXIvQ29yZS9VdGlscy9JbnRlcmFjdGlvbk1hbmFnZXIuanM/NmJiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgSW50ZXJhY3Rpb25NYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihlbmdpbmUsIGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5fZW5naW5lID0gZW5naW5lO1xuICAgICAgICB0aGlzLl9pbnRlcmFjdG9ycyA9IFtdO1xuICAgICAgICB0aGlzLl9leHRlcm5hbEludGVyYWN0b3JzID0gW107XG4gICAgICAgIHRoaXMuX3BhcnRpY2xlSW50ZXJhY3RvcnMgPSBbXTtcbiAgICB9XG4gICAgZXh0ZXJuYWxJbnRlcmFjdChkZWx0YSkge1xuICAgICAgICBmb3IgKGNvbnN0IGludGVyYWN0b3Igb2YgdGhpcy5fZXh0ZXJuYWxJbnRlcmFjdG9ycykge1xuICAgICAgICAgICAgaWYgKGludGVyYWN0b3IuaXNFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdG9yLmludGVyYWN0KGRlbHRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVDbGlja01vZGUobW9kZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGludGVyYWN0b3Igb2YgdGhpcy5fZXh0ZXJuYWxJbnRlcmFjdG9ycykge1xuICAgICAgICAgICAgaW50ZXJhY3Rvci5oYW5kbGVDbGlja01vZGU/Lihtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBpbml0KCkge1xuICAgICAgICB0aGlzLl9pbnRlcmFjdG9ycyA9IGF3YWl0IHRoaXMuX2VuZ2luZS5nZXRJbnRlcmFjdG9ycyh0aGlzLmNvbnRhaW5lciwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX2V4dGVybmFsSW50ZXJhY3RvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fcGFydGljbGVJbnRlcmFjdG9ycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGludGVyYWN0b3Igb2YgdGhpcy5faW50ZXJhY3RvcnMpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoaW50ZXJhY3Rvci50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImV4dGVybmFsXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4dGVybmFsSW50ZXJhY3RvcnMucHVzaChpbnRlcmFjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInBhcnRpY2xlc1wiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJ0aWNsZUludGVyYWN0b3JzLnB1c2goaW50ZXJhY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW50ZXJhY3Rvci5pbml0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFydGljbGVzSW50ZXJhY3QocGFydGljbGUsIGRlbHRhKSB7XG4gICAgICAgIGZvciAoY29uc3QgaW50ZXJhY3RvciBvZiB0aGlzLl9leHRlcm5hbEludGVyYWN0b3JzKSB7XG4gICAgICAgICAgICBpbnRlcmFjdG9yLmNsZWFyKHBhcnRpY2xlLCBkZWx0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpbnRlcmFjdG9yIG9mIHRoaXMuX3BhcnRpY2xlSW50ZXJhY3RvcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdG9yLmlzRW5hYmxlZChwYXJ0aWNsZSkpIHtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdG9yLmludGVyYWN0KHBhcnRpY2xlLCBkZWx0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzZXQocGFydGljbGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbnRlcmFjdG9yIG9mIHRoaXMuX2V4dGVybmFsSW50ZXJhY3RvcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdG9yLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rvci5yZXNldChwYXJ0aWNsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpbnRlcmFjdG9yIG9mIHRoaXMuX3BhcnRpY2xlSW50ZXJhY3RvcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdG9yLmlzRW5hYmxlZChwYXJ0aWNsZSkpIHtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdG9yLnJlc2V0KHBhcnRpY2xlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJJbnRlcmFjdGlvbk1hbmFnZXIiLCJleHRlcm5hbEludGVyYWN0IiwiZGVsdGEiLCJpbnRlcmFjdG9yIiwiX2V4dGVybmFsSW50ZXJhY3RvcnMiLCJpc0VuYWJsZWQiLCJpbnRlcmFjdCIsImhhbmRsZUNsaWNrTW9kZSIsIm1vZGUiLCJpbml0IiwiX2ludGVyYWN0b3JzIiwiX2VuZ2luZSIsImdldEludGVyYWN0b3JzIiwiY29udGFpbmVyIiwiX3BhcnRpY2xlSW50ZXJhY3RvcnMiLCJ0eXBlIiwicHVzaCIsInBhcnRpY2xlc0ludGVyYWN0IiwicGFydGljbGUiLCJjbGVhciIsInJlc2V0IiwiY29uc3RydWN0b3IiLCJlbmdpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/InteractionManager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/QuadTree.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tsparticles/engine/browser/Core/Utils/QuadTree.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuadTree: function() { return /* binding */ QuadTree; }\n/* harmony export */ });\n/* harmony import */ var _Ranges_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ranges.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/Ranges.js\");\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Utils/NumberUtils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js\");\n\n\nconst half = 0.5, double = 2, subdivideCount = 4;\nclass QuadTree {\n    insert(point) {\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this._points.length < this.capacity) {\n            this._points.push(point);\n            return true;\n        }\n        if (!this._divided) {\n            this._subdivide();\n        }\n        return this._subs.some((sub)=>sub.insert(point));\n    }\n    query(range, check) {\n        const res = [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this._points){\n            if (!range.contains(p.position) && (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__.getDistance)(range.position, p.position) > p.particle.getRadius() && (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this._divided) {\n            for (const sub of this._subs){\n                res.push(...sub.query(range, check));\n            }\n        }\n        return res;\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new _Ranges_js__WEBPACK_IMPORTED_MODULE_0__.Circle(position.x, position.y, radius), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new _Ranges_js__WEBPACK_IMPORTED_MODULE_0__.Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n    constructor(rectangle, capacity){\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this._subdivide = ()=>{\n            const { x, y } = this.rectangle.position, { width, height } = this.rectangle.size, { capacity } = this;\n            for(let i = 0; i < subdivideCount; i++){\n                const fixedIndex = i % double;\n                this._subs.push(new QuadTree(new _Ranges_js__WEBPACK_IMPORTED_MODULE_0__.Rectangle(x + width * half * fixedIndex, y + height * half * (Math.round(i * half) - fixedIndex), width * half, height * half), capacity));\n            }\n            this._divided = true;\n        };\n        this._points = [];\n        this._divided = false;\n        this._subs = [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdHNwYXJ0aWNsZXMvZW5naW5lL2Jyb3dzZXIvQ29yZS9VdGlscy9RdWFkVHJlZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Q7QUFDUztBQUN6RCxNQUFNRyxPQUFPLEtBQUtDLFNBQVMsR0FBR0MsaUJBQWlCO0FBQ3hDLE1BQU1DO0lBZ0JUQyxPQUFPQyxLQUFLLEVBQUU7UUFDVixJQUFJLENBQUMsSUFBSSxDQUFDQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0YsTUFBTUcsUUFBUSxHQUFHO1lBQzFDLE9BQU87UUFDWDtRQUNBLElBQUksSUFBSSxDQUFDQyxPQUFPLENBQUNDLE1BQU0sR0FBRyxJQUFJLENBQUNDLFFBQVEsRUFBRTtZQUNyQyxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csSUFBSSxDQUFDUDtZQUNsQixPQUFPO1FBQ1g7UUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDUSxRQUFRLEVBQUU7WUFDaEIsSUFBSSxDQUFDQyxVQUFVO1FBQ25CO1FBQ0EsT0FBTyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLE1BQVFBLElBQUliLE1BQU0sQ0FBQ0M7SUFDL0M7SUFDQWEsTUFBTUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7UUFDaEIsTUFBTUMsTUFBTSxFQUFFO1FBQ2QsSUFBSSxDQUFDRixNQUFNRyxVQUFVLENBQUMsSUFBSSxDQUFDaEIsU0FBUyxHQUFHO1lBQ25DLE9BQU8sRUFBRTtRQUNiO1FBQ0EsS0FBSyxNQUFNaUIsS0FBSyxJQUFJLENBQUNkLE9BQU8sQ0FBRTtZQUMxQixJQUFJLENBQUNVLE1BQU1aLFFBQVEsQ0FBQ2dCLEVBQUVmLFFBQVEsS0FDMUJULGtFQUFXQSxDQUFDb0IsTUFBTVgsUUFBUSxFQUFFZSxFQUFFZixRQUFRLElBQUllLEVBQUVDLFFBQVEsQ0FBQ0MsU0FBUyxNQUM3RCxFQUFDTCxTQUFTQSxNQUFNRyxFQUFFQyxRQUFRLElBQUk7Z0JBQy9CO1lBQ0o7WUFDQUgsSUFBSVQsSUFBSSxDQUFDVyxFQUFFQyxRQUFRO1FBQ3ZCO1FBQ0EsSUFBSSxJQUFJLENBQUNYLFFBQVEsRUFBRTtZQUNmLEtBQUssTUFBTUksT0FBTyxJQUFJLENBQUNGLEtBQUssQ0FBRTtnQkFDMUJNLElBQUlULElBQUksSUFBSUssSUFBSUMsS0FBSyxDQUFDQyxPQUFPQztZQUNqQztRQUNKO1FBQ0EsT0FBT0M7SUFDWDtJQUNBSyxZQUFZbEIsUUFBUSxFQUFFbUIsTUFBTSxFQUFFUCxLQUFLLEVBQUU7UUFDakMsT0FBTyxJQUFJLENBQUNGLEtBQUssQ0FBQyxJQUFJckIsOENBQU1BLENBQUNXLFNBQVNvQixDQUFDLEVBQUVwQixTQUFTcUIsQ0FBQyxFQUFFRixTQUFTUDtJQUNsRTtJQUNBVSxlQUFldEIsUUFBUSxFQUFFdUIsSUFBSSxFQUFFWCxLQUFLLEVBQUU7UUFDbEMsT0FBTyxJQUFJLENBQUNGLEtBQUssQ0FBQyxJQUFJcEIsaURBQVNBLENBQUNVLFNBQVNvQixDQUFDLEVBQUVwQixTQUFTcUIsQ0FBQyxFQUFFRSxLQUFLQyxLQUFLLEVBQUVELEtBQUtFLE1BQU0sR0FBR2I7SUFDdEY7SUFyREFjLFlBQVk1QixTQUFTLEVBQUVLLFFBQVEsQ0FBRTtRQUM3QixJQUFJLENBQUNMLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDSyxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0csVUFBVSxHQUFHO1lBQ2QsTUFBTSxFQUFFYyxDQUFDLEVBQUVDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQ3ZCLFNBQVMsQ0FBQ0UsUUFBUSxFQUFFLEVBQUV3QixLQUFLLEVBQUVDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQzNCLFNBQVMsQ0FBQ3lCLElBQUksRUFBRSxFQUFFcEIsUUFBUSxFQUFFLEdBQUcsSUFBSTtZQUN0RyxJQUFLLElBQUl3QixJQUFJLEdBQUdBLElBQUlqQyxnQkFBZ0JpQyxJQUFLO2dCQUNyQyxNQUFNQyxhQUFhRCxJQUFJbEM7Z0JBQ3ZCLElBQUksQ0FBQ2MsS0FBSyxDQUFDSCxJQUFJLENBQUMsSUFBSVQsU0FBUyxJQUFJTCxpREFBU0EsQ0FBQzhCLElBQUlJLFFBQVFoQyxPQUFPb0MsWUFBWVAsSUFBSUksU0FBU2pDLE9BQVFxQyxDQUFBQSxLQUFLQyxLQUFLLENBQUNILElBQUluQyxRQUFRb0MsVUFBUyxHQUFJSixRQUFRaEMsTUFBTWlDLFNBQVNqQyxPQUFPVztZQUNySztZQUNBLElBQUksQ0FBQ0UsUUFBUSxHQUFHO1FBQ3BCO1FBQ0EsSUFBSSxDQUFDSixPQUFPLEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUNJLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNFLEtBQUssR0FBRyxFQUFFO0lBQ25CO0FBd0NKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdHNwYXJ0aWNsZXMvZW5naW5lL2Jyb3dzZXIvQ29yZS9VdGlscy9RdWFkVHJlZS5qcz82OWI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENpcmNsZSwgUmVjdGFuZ2xlIH0gZnJvbSBcIi4vUmFuZ2VzLmpzXCI7XG5pbXBvcnQgeyBnZXREaXN0YW5jZSB9IGZyb20gXCIuLi8uLi9VdGlscy9OdW1iZXJVdGlscy5qc1wiO1xuY29uc3QgaGFsZiA9IDAuNSwgZG91YmxlID0gMiwgc3ViZGl2aWRlQ291bnQgPSA0O1xuZXhwb3J0IGNsYXNzIFF1YWRUcmVlIHtcbiAgICBjb25zdHJ1Y3RvcihyZWN0YW5nbGUsIGNhcGFjaXR5KSB7XG4gICAgICAgIHRoaXMucmVjdGFuZ2xlID0gcmVjdGFuZ2xlO1xuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgICAgIHRoaXMuX3N1YmRpdmlkZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5yZWN0YW5nbGUucG9zaXRpb24sIHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5yZWN0YW5nbGUuc2l6ZSwgeyBjYXBhY2l0eSB9ID0gdGhpcztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ViZGl2aWRlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpeGVkSW5kZXggPSBpICUgZG91YmxlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnMucHVzaChuZXcgUXVhZFRyZWUobmV3IFJlY3RhbmdsZSh4ICsgd2lkdGggKiBoYWxmICogZml4ZWRJbmRleCwgeSArIGhlaWdodCAqIGhhbGYgKiAoTWF0aC5yb3VuZChpICogaGFsZikgLSBmaXhlZEluZGV4KSwgd2lkdGggKiBoYWxmLCBoZWlnaHQgKiBoYWxmKSwgY2FwYWNpdHkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2RpdmlkZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5fZGl2aWRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zdWJzID0gW107XG4gICAgfVxuICAgIGluc2VydChwb2ludCkge1xuICAgICAgICBpZiAoIXRoaXMucmVjdGFuZ2xlLmNvbnRhaW5zKHBvaW50LnBvc2l0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wb2ludHMubGVuZ3RoIDwgdGhpcy5jYXBhY2l0eSkge1xuICAgICAgICAgICAgdGhpcy5fcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9kaXZpZGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJkaXZpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3Vicy5zb21lKChzdWIpID0+IHN1Yi5pbnNlcnQocG9pbnQpKTtcbiAgICB9XG4gICAgcXVlcnkocmFuZ2UsIGNoZWNrKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgICAgICBpZiAoIXJhbmdlLmludGVyc2VjdHModGhpcy5yZWN0YW5nbGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMuX3BvaW50cykge1xuICAgICAgICAgICAgaWYgKCFyYW5nZS5jb250YWlucyhwLnBvc2l0aW9uKSAmJlxuICAgICAgICAgICAgICAgIGdldERpc3RhbmNlKHJhbmdlLnBvc2l0aW9uLCBwLnBvc2l0aW9uKSA+IHAucGFydGljbGUuZ2V0UmFkaXVzKCkgJiZcbiAgICAgICAgICAgICAgICAoIWNoZWNrIHx8IGNoZWNrKHAucGFydGljbGUpKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLnB1c2gocC5wYXJ0aWNsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2RpdmlkZWQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViIG9mIHRoaXMuX3N1YnMpIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaCguLi5zdWIucXVlcnkocmFuZ2UsIGNoZWNrKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgcXVlcnlDaXJjbGUocG9zaXRpb24sIHJhZGl1cywgY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnkobmV3IENpcmNsZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCByYWRpdXMpLCBjaGVjayk7XG4gICAgfVxuICAgIHF1ZXJ5UmVjdGFuZ2xlKHBvc2l0aW9uLCBzaXplLCBjaGVjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeShuZXcgUmVjdGFuZ2xlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KSwgY2hlY2spO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJDaXJjbGUiLCJSZWN0YW5nbGUiLCJnZXREaXN0YW5jZSIsImhhbGYiLCJkb3VibGUiLCJzdWJkaXZpZGVDb3VudCIsIlF1YWRUcmVlIiwiaW5zZXJ0IiwicG9pbnQiLCJyZWN0YW5nbGUiLCJjb250YWlucyIsInBvc2l0aW9uIiwiX3BvaW50cyIsImxlbmd0aCIsImNhcGFjaXR5IiwicHVzaCIsIl9kaXZpZGVkIiwiX3N1YmRpdmlkZSIsIl9zdWJzIiwic29tZSIsInN1YiIsInF1ZXJ5IiwicmFuZ2UiLCJjaGVjayIsInJlcyIsImludGVyc2VjdHMiLCJwIiwicGFydGljbGUiLCJnZXRSYWRpdXMiLCJxdWVyeUNpcmNsZSIsInJhZGl1cyIsIngiLCJ5IiwicXVlcnlSZWN0YW5nbGUiLCJzaXplIiwid2lkdGgiLCJoZWlnaHQiLCJjb25zdHJ1Y3RvciIsImkiLCJmaXhlZEluZGV4IiwiTWF0aCIsInJvdW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/engine/browser/Core/Utils/QuadTree.js\n"));

/***/ })

}]);